generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String                    @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  roleId                   String?
  status                   String                    @default("ACTIVE")
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  lastLoginAt              DateTime?
  tenantId                 String?
  accounts                 Account[]
  annotations              Annotation[]
  apiKeys                  ApiKey[]
  approvals                Approval[]
  approvalRequests         ApprovalRequest[]
  auditLogs                AuditLog[]
  backups                  Backup[]
  contents                 Content[]
  contentVersions          ContentVersion[]
  customFields             CustomField[]
  customFieldValues        CustomFieldValue[]
  files                    File[]
  integrationInstallations IntegrationInstallation[]
  logs                     Log[]
  moduleLicenses           ModuleLicense[]
  notifications            Notification[]
  oauthConnections         OAuthConnection[]
  sessions                 Session[]
  tasks                    Task[]
  assignedTasks            Task[]                    @relation("TaskAssignee")
  taskAttachments          TaskAttachment[]
  taskComments             TaskComment[]
  twoFactorAuth            TwoFactorAuth?
  role                     Role?                     @relation(fields: [roleId], references: [id])
  userSettings             UserSettings?
  versionedRecords         VersionedRecord[]
  webhookSubscriptions     WebhookSubscription[]
  tags                     Tag[]                     @relation("TagToUser")
  quotes                   Quote[]
  quoteTemplates           QuoteTemplate[]

  @@index([email])
  @@index([roleId])
  @@index([tenantId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   @default("INFO")
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  permissions String
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  userId      String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
}

model File {
  id           String   @id @default(cuid())
  name         String
  originalName String
  path         String
  url          String
  size         Int
  type         String
  mimeType     String?
  isPublic     Boolean  @default(false)
  userId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Log {
  id        String   @id @default(cuid())
  level     String
  message   String
  type      String
  metadata  String?
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String
  isEnabled   Boolean  @default(false)
  backupCodes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("light")
  language      String   @default("tr")
  timezone      String   @default("Europe/Istanbul")
  dateFormat    String   @default("DD/MM/YYYY")
  notifications String   @default("ALL")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id            String    @id @default(cuid())
  name          String
  url           String
  events        String
  secret        String?
  isActive      Boolean   @default(true)
  lastTriggered DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([events])
  @@index([isActive])
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String
  type      String
  count     Int      @default(1)
  window    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([key, type, window])
  @@index([expiresAt])
}

model FeatureToggle {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isEnabled   Boolean  @default(false)
  rollout     Int      @default(0)
  conditions  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isEnabled])
}

model Tenant {
  id                       String                    @id @default(cuid())
  name                     String
  domain                   String?                   @unique
  settings                 String?
  isActive                 Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  integrationInstallations IntegrationInstallation[]
  moduleLicenses           ModuleLicense[]

  @@index([domain])
  @@index([isActive])
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("STRING")
  category  String   @default("GENERAL")
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String?
  userId     String?
  oldValues  String?
  newValues  String?
  ipAddress  String?
  userAgent  String?
  metadata   String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([createdAt])
}

model Module {
  id          String          @id @default(cuid())
  name        String          @unique
  displayName String
  description String?
  version     String          @default("1.0.0")
  isActive    Boolean         @default(true)
  isPremium   Boolean         @default(false)
  price       Float?
  features    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  licenses    ModuleLicense[]

  @@index([isActive])
  @@index([isPremium])
}

model ModuleLicense {
  id        String    @id @default(cuid())
  moduleId  String
  tenantId  String?
  userId    String?
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  features  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  module    Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, tenantId, userId])
  @@index([isActive])
  @@index([expiresAt])
}

model ApprovalWorkflow {
  id          String            @id @default(cuid())
  name        String
  description String?
  entityType  String
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  requests    ApprovalRequest[]
  steps       ApprovalStep[]

  @@index([entityType])
  @@index([isActive])
}

model ApprovalStep {
  id             String           @id @default(cuid())
  workflowId     String
  name           String
  description    String?
  order          Int
  approverRole   String?
  approverUserId String?
  isRequired     Boolean          @default(true)
  canReject      Boolean          @default(true)
  canEdit        Boolean          @default(false)
  autoApprove    Boolean          @default(false)
  timeoutHours   Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  approvals      Approval[]
  workflow       ApprovalWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId, order])
}

model ApprovalRequest {
  id          String           @id @default(cuid())
  workflowId  String
  entityType  String
  entityId    String
  status      String           @default("PENDING")
  currentStep Int              @default(1)
  data        String
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  approvals   Approval[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow    ApprovalWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([entityType])
  @@index([entityId])
  @@index([status])
  @@index([userId])
}

model Approval {
  id         String          @id @default(cuid())
  requestId  String
  stepId     String
  approverId String
  status     String          @default("PENDING")
  comment    String?
  data       String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  approver   User            @relation(fields: [approverId], references: [id], onDelete: Cascade)
  step       ApprovalStep    @relation(fields: [stepId], references: [id])
  request    ApprovalRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([approverId])
  @@index([status])
}

model ScheduledTask {
  id             String          @id @default(cuid())
  name           String
  description    String?
  cronExpression String
  handler        String
  parameters     String?
  isActive       Boolean         @default(true)
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  executions     TaskExecution[]

  @@index([isActive])
  @@index([nextRunAt])
}

model TaskExecution {
  id          String        @id @default(cuid())
  taskId      String
  status      String        @default("RUNNING")
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  duration    Int?
  result      String?
  error       String?
  createdAt   DateTime      @default(now())
  task        ScheduledTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([status])
  @@index([startedAt])
  @@index([createdAt])
}

model Integration {
  id            String                    @id @default(cuid())
  name          String                    @unique
  displayName   String
  description   String?
  type          String
  config        String
  isActive      Boolean                   @default(true)
  isPremium     Boolean                   @default(false)
  icon          String?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  installations IntegrationInstallation[]

  @@index([type])
  @@index([isActive])
}

model IntegrationInstallation {
  id            String      @id @default(cuid())
  integrationId String
  tenantId      String?
  userId        String?
  config        String
  isActive      Boolean     @default(true)
  lastSyncAt    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant        Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, tenantId, userId])
  @@index([isActive])
}

model Content {
  id          String           @id @default(cuid())
  title       String
  slug        String           @unique
  content     String
  type        String
  status      String           @default("DRAFT")
  authorId    String
  publishedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  versions    ContentVersion[]

  @@index([type])
  @@index([status])
  @@index([slug])
}

model ContentVersion {
  id            String   @id @default(cuid())
  contentId     String
  version       Int
  title         String
  content       String
  authorId      String
  createdAt     DateTime @default(now())
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  contentRecord Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, version])
  @@index([contentId])
  @@index([createdAt])
}

model VersionedRecord {
  id           String   @id @default(cuid())
  entityType   String
  entityId     String
  version      Int
  data         String
  authorId     String
  changeType   String
  changeReason String?
  createdAt    DateTime @default(now())
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([entityType, entityId, version])
  @@index([entityType])
  @@index([entityId])
  @@index([authorId])
  @@index([createdAt])
}

model Annotation {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  content    String
  type       String   @default("NOTE")
  isPrivate  Boolean  @default(false)
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags       Tag[]    @relation("AnnotationToTag")

  @@index([entityType])
  @@index([entityId])
  @@index([authorId])
  @@index([createdAt])
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  color       String       @default("#3B82F6")
  description String?
  isSystem    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  taskTags    TaskTag[]
  annotations Annotation[] @relation("AnnotationToTag")
  users       User[]       @relation("TagToUser")

  @@index([name])
  @@index([isSystem])
}

model Task {
  id             String           @id @default(cuid())
  title          String
  description    String?
  status         String           @default("TODO")
  priority       String           @default("MEDIUM")
  type           String           @default("TASK")
  assigneeId     String?
  reporterId     String
  dueDate        DateTime?
  estimatedHours Int?
  actualHours    Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  reporter       User             @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  assignee       User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  attachments    TaskAttachment[]
  comments       TaskComment[]
  tags           TaskTag[]

  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([dueDate])
}

model TaskComment {
  id         String   @id @default(cuid())
  taskId     String
  content    String
  authorId   String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
}

model TaskAttachment {
  id           String   @id @default(cuid())
  taskId       String
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedById String
  createdAt    DateTime @default(now())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model TaskTag {
  id        String   @id @default(cuid())
  taskId    String
  tagId     String
  createdAt DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
}

model Subscription {
  id                   String           @id @default(cuid())
  stripeCustomerId     String?
  stripeSubscriptionId String?
  planId               String
  status               String           @default("ACTIVE")
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  payments             Payment[]
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String
  description   String?
  stripePriceId String?
  price         Float
  currency      String         @default("USD")
  interval      String         @default("MONTH")
  features      String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@index([stripePriceId])
  @@index([isActive])
}

model Payment {
  id              String       @id @default(cuid())
  subscriptionId  String
  stripePaymentId String?
  amount          Float
  currency        String       @default("USD")
  status          String       @default("PENDING")
  paymentMethod   String?
  failureReason   String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([stripePaymentId])
  @@index([status])
  @@index([createdAt])
}

model CustomField {
  id            String             @id @default(cuid())
  name          String
  label         String
  type          String
  entityType    String
  isRequired    Boolean            @default(false)
  isUnique      Boolean            @default(false)
  options       String?
  validation    String?
  order         Int                @default(0)
  isActive      Boolean            @default(true)
  createdBy     String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  createdByUser User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  values        CustomFieldValue[]

  @@index([entityType])
  @@index([isActive])
  @@index([order])
}

model CustomFieldValue {
  id         String      @id @default(cuid())
  fieldId    String
  entityType String
  entityId   String
  value      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  field      CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([fieldId, entityType, entityId])
  @@index([entityType])
  @@index([entityId])
}

model OAuthProvider {
  id           String            @id @default(cuid())
  name         String            @unique
  displayName  String
  clientId     String
  clientSecret String
  authUrl      String
  tokenUrl     String
  userInfoUrl  String?
  scopes       String
  isActive     Boolean           @default(true)
  config       String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  connections  OAuthConnection[]

  @@index([name])
  @@index([isActive])
}

model OAuthConnection {
  id           String        @id @default(cuid())
  providerId   String
  userId       String
  externalId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  profile      String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     OAuthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, userId])
  @@unique([providerId, externalId])
  @@index([externalId])
  @@index([isActive])
}

model WebhookSubscription {
  id            String            @id @default(cuid())
  name          String
  url           String
  events        String
  secret        String?
  isActive      Boolean           @default(true)
  retryCount    Int               @default(3)
  timeout       Int               @default(30)
  lastTriggered DateTime?
  lastSuccess   DateTime?
  lastFailure   DateTime?
  failureCount  Int               @default(0)
  createdBy     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deliveries    WebhookDelivery[]
  createdByUser User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([events])
  @@index([isActive])
  @@index([lastTriggered])
}

model WebhookDelivery {
  id             String              @id @default(cuid())
  subscriptionId String
  event          String
  payload        String
  response       String?
  statusCode     Int?
  duration       Int?
  success        Boolean
  error          String?
  createdAt      DateTime            @default(now())
  subscription   WebhookSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([event])
  @@index([success])
  @@index([createdAt])
}

model Backup {
  id            String    @id @default(cuid())
  name          String
  type          String    @default("FULL")
  status        String    @default("PENDING")
  filePath      String?
  fileSize      Int?
  checksum      String?
  metadata      String?
  createdBy     String
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  createdByUser User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String
  description     String?
  isSystem        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  users           User[]

  @@index([name])
  @@index([isSystem])
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  category        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@index([name])
  @@index([category])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model Provider {
  id          String            @id @default(cuid())
  name        String
  email       String            @unique
  phone       String?
  address     String?
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  employees   Employee[]
  services    ProviderService[]
}

model Employee {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String?
  position     String?
  isActive     Boolean       @default(true)
  providerId   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  provider     Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([isActive])
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  quotes       Quote[]

  @@index([email])
}

model Service {
  id           String            @id @default(cuid())
  name         String
  description  String?
  duration     Int
  price        Float?
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  appointments Appointment[]
  providers    ProviderService[]

  @@index([isActive])
}

model ProviderService {
  id         String   @id @default(cuid())
  providerId String
  serviceId  String
  price      Float?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, serviceId])
  @@index([isActive])
}

model Appointment {
  id          String                  @id @default(cuid())
  employeeId  String
  customerId  String
  serviceId   String
  start       DateTime
  end         DateTime
  status      String
  note        String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  service     Service                 @relation(fields: [serviceId], references: [id])
  customer    Customer                @relation(fields: [customerId], references: [id])
  employee    Employee                @relation(fields: [employeeId], references: [id])
  attachments AppointmentAttachment[]

  @@unique([employeeId, customerId, start])
}

model AppointmentAttachment {
  id            String      @id @default(cuid())
  appointmentId String
  name          String
  filename      String
  type          String
  size          Int
  path          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@index([type])
  @@index([createdAt])
}

// Quote Management System
model Quote {
  id              String        @id @default(cuid())
  quoteNumber     String        @unique
  title           String
  description     String?
  customerId      String
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerAddress String?
  
  // Quote details
  subtotal        Float         @default(0)
  taxRate         Float         @default(0)
  taxAmount       Float         @default(0)
  discountRate    Float         @default(0)
  discountAmount  Float         @default(0)
  total           Float         @default(0)
  
  // Status and dates
  status          String        @default("DRAFT") // DRAFT, SENT, ACCEPTED, REJECTED, EXPIRED
  validUntil      DateTime?
  sentAt          DateTime?
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  
  // PDF and files
  pdfPath         String?
  pdfGeneratedAt  DateTime?
  
  // Metadata
  notes           String?
  terms           String?
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  items           QuoteItem[]
  createdByUser   User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([quoteNumber])
  @@index([status])
  @@index([customerId])
  @@index([createdBy])
  @@index([createdAt])
  @@index([validUntil])
}

model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  name        String
  description String?
  quantity    Float    @default(1)
  unitPrice   Float    @default(0)
  total       Float    @default(0)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@index([quoteId])
  @@index([order])
}

// Quote Template System
model QuoteTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String   // HTML template content
  css         String?  // Custom CSS styles
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  createdByUser User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([isDefault])
  @@index([createdBy])
}
